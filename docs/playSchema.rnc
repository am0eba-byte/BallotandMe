start = root

root = element root {head, body}

head = element head {title, editor*}

    title = element title {text}
        
    editor = element editor {text}
        
        #BODY STRUCTURE: the reason for the awkward-looking <pgbr> rules in the beginning is because
        # we needed a way to indicate a page break in the title pages, but we didn't want to number them
        # the same way as <pg> because on the actual typescript, the title pages don't have page numbers
        # in the upper left corner. 
        
body = element body {(titlePage), (pgbr), (castList), (pgbr), (set), (div1 | pg)*}

pg = element pg {n, empty}

pgbr = element pgbr {empty}

    n = attribute n {xsd:integer}
    
    
    # TITLE PAGES STRUCTURE: These are the set of rules that dictate the pages preceding the cast list.
    # We decided to make special rules for this section due to the differences in text formatting in
    #these pages. We wanted to ensure that we could easily capture the elements of this section in 
    # the .css styling so that we could make them distinguishable from the rest of the script.


titlePage = element titlePage {copy, playtitle, titledesc, author, published, marginalia}

    copy = element copy {underline}
    
    playtitle = element playtitle {underline}

    titledesc = element titledesc {mixed{lb+}}

author = element author {mixed{lb*}}

published = element published {(pubPlace | date | lb)*}

    pubPlace = element pubPlace {text}

    date = element date {when, text}

        when = attribute when {xsd:gYear}

marginalia = element marginalia {hand, mixed{lb*}}

    hand = attribute hand {"LH"}
    
    

        #CAST LIST STRUCTURE: This section requires the most editing and brainwork of the whole document,
        # due to the informational structure of the original document. We really wanted to effectively
        # capture each of the cast memebers into their distinct real-world historical roles, and
        # ensure that all of the given information was wrapped in individual identifiers to be displayed
        # as styling or in data tools later on. The whole play sort of revolves around these real-world
        # characters in their specific time periods, so it was important that this section have very
        # clear and defined rules.


castList = element castList {header, (castgroup | castItem)*, note}

    header = element header {mixed{ (underline | lb)*}}

    castItem = element castItem {mixed{ (unclear | role | activePeriod | lb | person)* } }
    
        unclear = element unclear {text}
    
        role = element role {text}

        activePeriod = element activePeriod {(castGroupRole | position)*, mixed{(lb | period | date)*}}
        
        lb = element lb {empty}
        
            castGroupRole = attribute castGroupRole {(xsd:integer | "narrator")}
        
            position = attribute position {"right"}

            period = element period {begin, end, text}
            
                begin = attribute begin {xsd:gYear}
                
                end = attribute end {xsd:gYear}

    castgroup = element castgroup {n, castItem*, activePeriod*}
    
    
    note = element note {hand?, p}
    
    
    
    
    # SET SECTION STRUCTURE: This section needed distinct rules as well, in order to capture the format
    # of the text. We used <ab> to wrap the setting, time, and action sub-headings because we didn't 
    # really want to make them their own headings, but they also didn't really constitute as paragraphs,
    # so <ab> was the most ambiguous and fitting element name in that case.


set = element set {header, setting, setTime, action}

    setting = element setting {ab, setDesc}
    
        ab = element ab {text}
        
        setDesc= element setDesc {text}
        
    setTime = element setTime {ab, timedesc}
    
        timedesc = element timedesc {text}
    
    action = element action {ab, actiondesc}
    
        actiondesc = element actiondesc {mixed{lb*}}
        
        
        
        
        # SCRIPT SCTRUCTURE: This section contains the bulk of the document, so there was lots to include.
        # We wrote the schema so thateach speaker and their individual speaking parts could be wrapped
        # in <sp> to keep them together, and made each historical character's name linkable to their 
        #castList ID, to make future data collection easier. We also wanted to make it possible for 
        # stage directions to appear both within dialogue parts (as sometimes they occur as a character
        #is speaking) AND outside of <sp> elements to markup stage occurences that happen independently
        # of dialogue. We also added rules for marking up special text decorations so that we could 
        # implement them into our .css styling.
    

    div1 = element div1 {(sp | stage)*}

    sp = element sp {(speaker | dialogue | metamark)*}
    
        speaker = element speaker {idref?, mixed{lb*}}
            
         dialogue = element dialogue {(p | stage)*}
         
         
         p = element p {class?, mixed{ (note | metamark | insert | underline | Xout | q | lb | stage | date | location | person)* } }
         
         
            location = element location {mixed{lb*}}
            
            person = element person {id?, speakPart?, idref?, mixed{lb*}}
            
            id = attribute xml:id {xsd:ID}
            
            idref = attribute idref {xsd:IDREF}
            
            speakPart = attribute speakPart {"true"}
            
            # The reason for the special class attributes on <p> is due to our
            # navigation menu bar at the top of the document, which is wrapped in
            #<p>, and one particular page section which ends with a speaking part
            # from Cain, and in the actual document, there's a nothing written on
            # the rest of that page, leaving a large blank area. It looks a little
            # strange to have such a tiny-looking paper in relation to the rest
            # of the pages on our website, so we decided to wrap Cain's speaking
            # paragraph on that page with a p.cain so that we could mess with the
            # margin-bottom and make it look more like it does in the original
            #typescript.
            
            class = attribute class {("navbar" | "cain")}
            
            metamark = element metamark {hand, text}
            
            insert = element insert {hand, text}
            
            underline = element underline {color?, mixed{lb*}}
                
                color = attribute color {"red"}
            
            Xout = element Xout {text}
            
            q = element q {mixed{(lb | underline)*}}
            
     stage = element stage {(type | idref)*, mixed{(lb | person)*}}
    
        type = attribute type {"enter" | "action" }
        
